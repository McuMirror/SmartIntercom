substitutions:
  dev_name: smartintercom
  
#ESP32 Определение нужных GPIO
  base: esp32dev
  led_status: GPIO16            # Индикатор статуса API, GPIO2 - это встроенный синий светодиод на ESP12
  led_indicator: GPIO13         # Дополнительный индикатор, который будет показывать режимы и прочее.
  detect_line: GPIO12           # Пин детектора вызова
  button_boot: GPIO0            # Кнопка управления платой и перевода в режим прошивки
  relay_line: GPIO14            # Пин "Переключение линии, плата/трубка"
  switch_open: GPIO17           # Пин "Открытие двери"
  switch_phone: GPIO4           # Пин "Трубка положена/поднята"

#input_select_mode_value
  input_select_disable: "Не активен"
  input_select_no_answer: "Сброс вызова если нет ответа" 
  input_select_reject: "Сброс вызова"
  input_select_accept: "Открывать всегда"

#line_status_text
  line_status_call:   "Вызов"
  line_status_answer: "Ответ"
  line_status_open:   "Открытие двери"
  line_status_reject: "Сброс вызова"
  line_status_close:  "Закрыто"

#delay
  call_end_detect_delay: 3000ms     # Интервал между детектированием вызова
  delay_before_switch_line: 1000ms  # Отпределили вызов, *** подождали ***... Передаем управление на плату, отключаем трубку.
  delay_before_voice: 1000ms        # Плата получила управление, *** подождали *** ... воспроизводим аудио, если надо.
  delay_before_open_door: 100ms     # Воспроизведение аудио закончилось, *** подождали *** ... нажимаем кнопку открытия двери.
  delay_open_on_time: 600ms         # Кнопка открытия двери нажата, *** подождали *** ... отпустили кнопку.
  delay_after_close_door: 2000ms    # Отпустили кнопку открытия двери, *** подождали *** ... Возвращаем управление на трубку
  delay_no_answer: 30s              # Пауза для режима "Сброс если нет ответа" - сколько этот ответ плата ждёт

# Логика работы:
# 
# Определение "Вызова", интеревал между детектированием - call_end_detect_delay (3 сек.)
# Включение LED индикатора в режим быстрого мигания.
#
# +-----------Если включен режим MUTE-----------+ Это позволяет при вызове быстро передать управление
# | Включение на плате режима "трубка положена" | на плату, и трубка не успевает издать звук вызова.
# | Переключение управления на плату            | При этом на плате устанавливается режим положеной
# +---------------------------------------------+ трубки, поэтому на блоке вызова просто идет вызов.
#
# delay_before_switch_line: (1000 мсек.)          Ждем, чтобы "желательно" попасть в паузу между
#                                                 вызовными сигналами, заодно чтобы блок вызова
#                                                 успел перейти в режим работы с абонентом, - малоли.
#
# +---Если режим "сброс, если нет ответа"-------+ Если установлен этот режим, то просто ждем 30 сек.
# | delay_no_answer (30 сек)                    | и запускаем скрипт сброса звонка.
# | Включение режима "сброс"                    |
# +---------------------------------------------+        
#
# +---Если включен какой-нибудь режим работы----+ Если выбран какой-либо режим кроме "Неактивен",
# | Переключение управления на плату            | то начинаем работу по отработке вызова.
# | "Поднимаем трубку"                          | Делаем поднятие трубки, малоли был режим мьюта.
# | delay_before_voice (1000 мсек.)             | Ждем, чтобы блок вызова успел отработать поднятие
# |                                             | трубки, и дать работу с аудио трактом.
# | +--Если режим курьера или аудио включено--+ | Если режим курьера или включено аудио сообщение,
# | | Воспроизведение аудио                   | | то собственно воспроизводим аудио, и ждем окончания
# | +-----------------------------------------+ | воспроизведения
# |                                             |
# | +--Если открывающий режим-----------------+ | Открывающий режим - разовый/постоянный или "курьер"
# | | delay_before_open_door (100 мсек.)      | | Ждем немного, чтобы с аудио, которое воспроизводилось
# | | Нажатие кнопки открытия двери.          | | на блоке вызова не обрывало. И жмём "Открыть"
# | +-----------------------------------------+ |
# |                                             | 
# | delay_open_on_time (600 мсек.)              | Ждем, чтобы блок вызова успел переварить сигналы.
# | Отпускание кнопки открытия двери.           | Отпускаем кнопку открытия, если не была нажата - 
# | delay_after_close_door (2000 мсек.)         | ну и пофиг. Ждем, перед сбросом. Если не ждать, 
# | Переключаем линию назад на трубку           | то может детектор отработать еще раз, и будет 
# +---------------------------------------------+ по кругу гонять, пока на блоке вызова сброс не нажмут.
#                                                 Переключаем линию на трубку, а она у нас положена,
#                                                 и поэтому блок вызова отпеределяет это как
#                                                 положили трубку и завершает сеанс вызова.
#
# Ожидание окончания связи с блоком вызова          
# Выключение режима "положенной трубки"          Выключение GPIO, чтобы энергию не кушал,
# Переключение линии назад на трубку             а физическая трубка положена, и она будет на линии.
# Выключение LED индикатора

esphome:
  name: ${dev_name}
  comment: "https://t.me/smartintercom"
  on_boot:
    priority: -100
    then:
      - script.execute: boot_script

esp32:
  board: ${base}

# Enable logging
logger:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
      ssid: ${dev_name}
      password: "12345678"

captive_portal:

# Глобальные переменные
globals:
- id: current_mode
  type: int
  initial_value: '0'
- id: status_line
  type: bool
  initial_value: 'false'
- id: status_mute
  type: bool
  initial_value: 'false'
- id: status_phone_disable
  type: bool
  initial_value: 'false'
- id: status_leding
  type: bool
  initial_value: 'true'
- id: status_sound
  type: bool
  initial_value: 'true'
- id: status_once_mode
  type: int
  initial_value: '0'

# MQTT и API вместе работать не могут. Выбери что надо.
# +---------------------------------------------+
# Активируем работу по протоколу MQTT    
# +---------------------------------------------+
#mqtt:
#broker: 192.168.0.254
#username: "mqtt-client"
#password: "j3qq4h7h2v2hch4m3hk86m8vw" 
# +---------------------------------------------+
# Активируем работу с API HomeAssistans через интеграцию ESPHome
# +---------------------------------------------+
api:
# +---------------------------------------------+

# Возможность обновляться по воздуху
ota:
  password: "12345678"

status_led:
  pin: $led_status

# Пошла мазута
light:
- platform: monochromatic
  id: led_indicator
  output: indicator
  internal: true
  restore_mode: ALWAYS_OFF
  default_transition_length: 0ms
  effects:
    - pulse:
        name: pulse
        update_interval: 2s
    - strobe:
        name: blink
        colors:
          - state: true
            duration: 100ms
          - state: false
            duration: 1900ms
    - strobe:
        name: calling
        colors:
          - state: true
            duration: 50ms
          - state: false
            duration: 50ms

media_player:
- platform: i2s_audio
  name: audio_player
  internal: true
  dac_type: internal
  mode: right

script:
- id: boot_script
  then:
    - logger.log: "Boot config"
    - if:
        condition:
          lambda: 'return id(current_mode) == 0;'
        then:
          - select.set:
              id: mode_select
              option: ${input_select_disable}
          - logger.log: ${input_select_disable}
        else:      
          if:
            condition:
              lambda: 'return id(current_mode) == 1;'
            then:
              - select.set:
                  id: mode_select
                  option: ${input_select_no_answer}
              - logger.log: ${input_select_no_answer}
            else:
              if:
                condition:
                  lambda: 'return id(current_mode) == 2;'
                then:
                  - select.set:
                      id: mode_select
                      option: ${input_select_reject}
                  - logger.log: ${input_select_reject}
                else:   
                  - select.set:
                      id: mode_select
                      option: ${input_select_accept}
                  - logger.log: ${input_select_accept}
    - if:
        condition:
          lambda: 'return id(status_leding);'
        then:
          switch.turn_on: led
    - if:
        condition:
          lambda: 'return id(status_sound);'
        then:
          switch.turn_on: sound
    - if:
        condition:
          lambda: 'return id(status_mute);'
        then:
          switch.turn_on: mute
    - if:
        condition:
          lambda: 'return id(status_phone_disable);'
        then:
          switch.turn_on: phone_disable
    - if:
        condition:
          lambda: 'return id(status_once_mode) == 1;'
        then:
          switch.turn_on: accept_call
        else:
          if:
            condition:
              lambda: 'return id(status_once_mode) == 2;' 
            then:
              switch.turn_on: delivery
            else:
              if:
                condition:
                  lambda: 'return id(status_once_mode) == 3;'
                then:
                  switch.turn_on: reject_call
- id: led_off
  then:
    - light.turn_off:
        id: led_indicator
    - if:
        condition:
          lambda: 'return id(status_mute);'
        then:
          if:
            condition:
              lambda: 'return id(status_leding);'
            then:
              light.turn_on:
                id: led_indicator
                effect: pulse
- id: led_blink
  then:
    - light.turn_off:
        id: led_indicator
    - if:
        condition:
          lambda: 'return id(status_leding);'
        then:
          light.turn_on:
            id: led_indicator
            effect: blink
              
- id: led_calling
  then:
    - light.turn_off:
        id: led_indicator
    - if:
        condition:
          lambda: 'return id(status_leding);'
        then:
          light.turn_on:
            id: led_indicator
            effect: calling
              
- id: led_pulse
  then:
    - light.turn_off:
        id: led_indicator
    - if:
        condition:
          lambda: 'return id(status_leding);'
        then:
          light.turn_on:
            id: led_indicator
            effect: pulse

# Accept incoming call
- id: accepting
  then:
    if:
      condition:
        lambda: 'return id(status_line);'
      then:
        - output.turn_on: relay_switch_line
        - output.turn_off: phone_down
        - lambda: 'id(line_status).publish_state("${line_status_answer}");'
        - delay: $delay_before_voice
        - if:
            condition:
              switch.is_on: delivery
            then:
              media_player.play_media: !lambda 'return id(delivery_access_link).state.c_str();'
            else:
              if:
                condition:
                  lambda: 'return id(status_sound);'
                then:
                  media_player.play_media: !lambda 'return id(user_access_link).state.c_str();'
        - wait_until:
            media_player.is_idle:
        - delay: $delay_before_open_door
        - output.turn_on: open_door
        - lambda: 'id(line_status).publish_state("${line_status_open}");'
        - delay: $delay_open_on_time
        - output.turn_off: open_door
        - lambda: 'id(line_status).publish_state("${line_status_reject}");'
        - delay: $delay_after_close_door
        - if:
            condition:
              lambda: 'return id(status_line);'
            then:
              output.turn_on: phone_down
        - lambda: 'id(line_status).publish_state("${line_status_close}");'
        - if:
            condition:
              switch.is_on: accept_call
            then:
              - switch.turn_off: accept_call
              - switch.turn_off: delivery

# Reject incoming call
- id: rejecting
  then:
    if:
      condition:
        lambda: 'return id(status_line);'
      then:
        - output.turn_on: relay_switch_line
        - output.turn_off: phone_down
        - lambda: 'id(line_status).publish_state("${line_status_answer}");'
        - delay: $delay_before_voice
        - if:
            condition:
              lambda: 'return id(status_sound);'
            then:
              if:
                condition:
                  lambda: 'return id(current_mode) == 2;'
                then:
                  media_player.play_media: !lambda 'return id(user_denied_link).state.c_str();'
                else:
                  if:
                    condition:
                      switch.is_on: reject_call
                    then:
                      media_player.play_media: !lambda 'return id(user_no_connect_link).state.c_str();'
                    else:
                      media_player.play_media: !lambda 'return id(user_no_answer_link).state.c_str();'
        - wait_until:
            media_player.is_idle:
        - delay: $delay_open_on_time
        - lambda: 'id(line_status).publish_state("${line_status_reject}");'
        - if:
            condition:
              lambda: 'return id(status_line);'
            then:
              output.turn_on: phone_down
        - lambda: 'id(line_status).publish_state("${line_status_close}");'
        - delay: $delay_after_close_door
        - if:
            condition:
              switch.is_on: reject_call
            then:
              switch.turn_off: reject_call

# Reject no answer
- id: rejecting_no_answer
  then:
    if:
      condition:
        lambda: 'return id(status_line);'
      then:
        - delay: $delay_no_answer
        - script.execute: rejecting

- id: state_call
  then:
    if:
      condition:
        switch.is_on: accept_call
      then:
        script.execute: accepting
      else:
        if:
          condition:
            switch.is_on: reject_call
          then:
            script.execute: rejecting
          else:
            if:
              condition:
                lambda: 'return id(current_mode) == 3;'
              then:
                script.execute: accepting
              else:
                if:
                  condition:
                    lambda: 'return id(current_mode) == 2;'
                  then:
                    script.execute: rejecting
                  else:
                    if:
                      condition:
                        lambda: 'return id(current_mode) == 1;'
                      then:
                        script.execute: rejecting_no_answer
                      else:
                        lambda: 'id(line_status).publish_state("${line_status_close}");'

select:
- platform: template
  name: ${dev_name}_modes
  icon: "mdi:deskphone"
  optimistic: true
  id: mode_select
  options:
    - ${input_select_disable}
    - ${input_select_no_answer}
    - ${input_select_reject}
    - ${input_select_accept}
  initial_option: ${input_select_disable}
  on_value:
    lambda: |-
        if (id(mode_select).state == "${input_select_disable}") {
          id(current_mode) = 0;
        } else if (id(mode_select).state == "${input_select_no_answer}") {
          id(current_mode) = 1;
        } else if (id(mode_select).state == "${input_select_reject}") {
          id(current_mode) = 2;
        } else {
          id(current_mode) = 3;
        }
        
text_sensor:
- platform: template
  id: line_status
  icon: "mdi:bell"
  name: ${dev_name}_line_status
  lambda: 'return {"${line_status_close}"};'
- platform: wifi_info
  ip_address:
    name: ${dev_name}_ip
    icon: "mdi:lan"
  ssid:
    name: ${dev_name}_ssid
    icon: "mdi:wifi"
  mac_address:
    name: ${dev_name}_mac
    icon: "mdi:lan"
- platform: homeassistant
  entity_id: input_text.${dev_name}_user_no_connect_link
  id: user_no_connect_link
- platform: homeassistant
  entity_id: input_text.${dev_name}_user_no_answer_link
  id: user_no_answer_link
- platform: homeassistant
  entity_id: input_text.${dev_name}_delivery_access_link
  id: delivery_access_link
- platform: homeassistant
  entity_id: input_text.${dev_name}_user_denied_link
  id: user_denied_link
- platform: homeassistant
  entity_id: input_text.${dev_name}_user_access_link
  id: user_access_link   

sensor:
- platform: wifi_signal
  name: ${dev_name}_rssi
  update_interval: 600s
- platform: template
  name: ${dev_name}_heap
  lambda: "return ESP.getFreeHeap();"
  update_interval: 20s
  unit_of_measurement: bytes
  accuracy_decimals: 0
  entity_category: "diagnostic"
  
binary_sensor:
- platform: gpio
  id: line_detect
  name: ${dev_name}_line_detect
  pin:
    number: $detect_line
    mode: INPUT_PULLUP
    inverted: True
  filters:
    - delayed_off: ${call_end_detect_delay}
  on_press:
    if:
      condition:
        lambda: 'return id(status_line) == false;'
      then:
        - script.execute: led_calling
        - lambda: 'id(status_line) = true;'
        - logger.log: "Incoming call detected"
        - if:
            condition:
              lambda: 'return id(status_mute);'
            then:
              - output.turn_on: phone_down
              - output.turn_on: relay_switch_line
        - delay: $delay_before_switch_line
        - script.execute: state_call
  on_release:
    - if:
        condition:
          switch.is_on: phone_disable
        then:
          - output.turn_on: phone_down
          - output.turn_on: relay_switch_line
        else:
          - output.turn_off: phone_down
          - output.turn_off: relay_switch_line
    - lambda: 'id(status_line) = false;'
    - logger.log: "Incoming call completed"
    - script.execute: led_off
  on_state:
    lambda: |-
      if (x) {
        id(line_status).publish_state("${line_status_call}");
      } else {
        id(line_status).publish_state("${line_status_close}");
      }   
      
- platform: gpio
  id: ${dev_name}_button
  pin:
    number: $button_boot
    mode: INPUT_PULLUP
    inverted: True
  on_press:
    then:
      switch.toggle: accept_call
  on_multi_click:
    - timing:
      - ON for at least 5s
      then:
        lambda: |-
          ESP_LOGW("DMF", "Erase settings and restart...");
          wifi::global_wifi_component->save_wifi_sta("-----", "");
          delay(500);
          ESP.restart();

output:
- platform: gpio
  id: relay_switch_line
  pin:
    number: $relay_line
    mode: OUTPUT
- platform: gpio
  id: open_door
  pin:
    number: $switch_open
    mode: OUTPUT
- platform: ledc
  id: indicator
  pin:
    number: $led_indicator
    mode: OUTPUT
- platform: gpio
  id: phone_down
  pin:
    number: $switch_phone
    mode: OUTPUT

button:
- platform: restart
  name: ${dev_name}_restart

switch:
- platform: template
  name: ${dev_name}_delivery
  id: delivery
  icon: "mdi:package"
  turn_on_action:
    - switch.template.publish:
        id: delivery
        state: true
    - switch.turn_on: accept_call
    - lambda: 'id(status_once_mode) = 2;'
  turn_off_action:
    - switch.template.publish:
        id: delivery
        state: false
    - if:
        condition:
          switch.is_on: accept_call
        then:
          lambda: 'id(status_once_mode) = 1;'
        else:
          lambda: 'id(status_once_mode) = 0;'
        

- platform: template
  name: ${dev_name}_accept_call
  id: accept_call
  icon: "mdi:door-open"
  turn_on_action:
    - switch.template.publish:
        id: accept_call
        state: true
    - switch.turn_off: reject_call
    - logger.log: "Accept call switch is ON"
    - if:
        condition:
          lambda: 'return id(status_line);'
        then:
          - logger.log: "Execute action script"
          - script.execute: state_call
        else:
          - script.execute: led_blink
          - logger.log: "No incoming call. One-time mode is set."
    - lambda: 'id(status_once_mode) = 1;'
  turn_off_action:
    - switch.template.publish:
        id: accept_call
        state: false
    - switch.turn_off: delivery
    - if:
        condition:
          lambda: 'return id(status_line);'
        then:
          script.execute: led_calling
        else:
          script.execute: led_off
    - lambda: 'id(status_once_mode) = 0;'

  
- platform: template
  name: ${dev_name}_reject_call
  id: reject_call
  icon: "mdi:phone-hangup"
  turn_on_action:
    - switch.template.publish:
        id: reject_call
        state: true
    - switch.turn_off: accept_call
    - switch.turn_off: delivery
    - if:
        condition:
          lambda: 'return id(status_line);'
        then:
          - logger.log: "Execute action script"   
          - script.execute: state_call
        else:
          - script.execute: led_blink
          - logger.log: "No incoming call. One-time mode is set."
    - lambda: 'id(status_once_mode) = 3;'
  turn_off_action:
    - switch.template.publish:
        id: reject_call
        state: false
    - if:
        condition:
          lambda: 'return id(status_line);'
        then:
          script.execute: led_calling
        else:
          script.execute: led_off
    - lambda: 'id(status_once_mode) = 0;'

- platform: template
  name: ${dev_name}_mute
  id: mute
  icon: "mdi:bell-off"
  entity_category: "config"
  turn_on_action:
    - switch.template.publish:
        id: mute
        state: true
    - lambda: 'id(status_mute) = true;'
    - if:
        condition:
          and:
            - lambda: 'return id(status_line) == false;'
            - switch.is_off: accept_call
            - switch.is_off: reject_call
        then:
            script.execute: led_pulse

  turn_off_action:
    - switch.template.publish:
        id: mute
        state: false
    - lambda: 'id(status_mute) = false;'
    - if:
        condition:
          and:
            - lambda: 'return id(status_line) == false;'
            - switch.is_off: accept_call
            - switch.is_off: reject_call
        then:
            script.execute: led_off
            
- platform: template
  name: ${dev_name}_phone_disable
  id: phone_disable
  icon: "mdi:phone-off"
  entity_category: "config"
  turn_on_action:
    - switch.template.publish:
        id: phone_disable
        state: true
    - lambda: 'id(status_phone_disable) = true;'
    - if:
        condition:
          lambda: 'return id(status_line) == false;'
        then:
          - output.turn_on: phone_down
          - output.turn_on: relay_switch_line
  turn_off_action:
    - switch.template.publish:
        id: phone_disable
        state: false
    - lambda: 'id(status_phone_disable) = false;'
    - if:
        condition:
          lambda: 'return id(status_line) == false;'
        then:
          - output.turn_off: phone_down
          - output.turn_off: relay_switch_line   
          
- platform: template
  name: ${dev_name}_led
  id: led
  icon: "mdi:led-on"
  entity_category: "config"
  turn_on_action:
    - switch.template.publish:
        id: led
        state: true
    - lambda: 'id(status_leding) = true;'
    - if:
        condition:
          lambda: 'return id(status_line);'
        then:
          script.execute: led_calling
        else:
          if:
            condition:
              and:
                - lambda: 'return id(status_mute) == true;'
                - lambda: 'return id(status_line) == false;'
                - switch.is_off: accept_call
                - switch.is_off: reject_call
            then:
                script.execute: led_pulse
            else:
              if:
                condition:
                  or:
                    - switch.is_on: accept_call
                    - switch.is_on: reject_call
                then:
                  script.execute: led_blink
  turn_off_action:
    - switch.template.publish:
        id: led
        state: false
    - lambda: 'id(status_leding) = false;'
    - script.execute: led_off

- platform: template
  name: ${dev_name}_sound
  id: sound
  icon: "mdi:volume-high"
  entity_category: "config"
  turn_on_action:
    - switch.template.publish:
        id: sound
        state: true
    - lambda: 'id(status_sound) = true;'
  turn_off_action:
    - switch.template.publish:
        id: sound
        state: false
    - lambda: 'id(status_sound) = false;'
